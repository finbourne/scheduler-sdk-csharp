/*
 * FINBOURNE Scheduler API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Scheduler.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Scheduler.Sdk.Model
{
    /// <summary>
    /// Request to upload image for Scheduler use
    /// </summary>
    [DataContract(Name = "UploadImageRequest")]
    public partial class UploadImageRequest : IEquatable<UploadImageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadImageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadImageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadImageRequest" /> class.
        /// </summary>
        /// <param name="imageName">Name of the image to be uploaded (required).</param>
        public UploadImageRequest(string imageName = default(string))
        {
            // to ensure "imageName" is required (not null)
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName is a required property for UploadImageRequest and cannot be null");
            }
            this.ImageName = imageName;
        }

        /// <summary>
        /// Name of the image to be uploaded
        /// </summary>
        /// <value>Name of the image to be uploaded</value>
        [DataMember(Name = "imageName", IsRequired = true, EmitDefaultValue = true)]
        public string ImageName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadImageRequest {\n");
            sb.Append("  ImageName: ").Append(ImageName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadImageRequest);
        }

        /// <summary>
        /// Returns true if UploadImageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadImageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadImageRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImageName == input.ImageName ||
                    (this.ImageName != null &&
                    this.ImageName.Equals(input.ImageName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageName != null)
                {
                    hashCode = (hashCode * 59) + this.ImageName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ImageName (string) maxLength
            if (this.ImageName != null && this.ImageName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageName, length must be less than 256.", new [] { "ImageName" });
            }

            // ImageName (string) minLength
            if (this.ImageName != null && this.ImageName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageName, length must be greater than 1.", new [] { "ImageName" });
            }

            // ImageName (string) pattern
            Regex regexImageName = new Regex(@"^[a-z\d]+((([.]{1}|[_]{1,2}|[-])+)([a-z\d]+))*:[a-z\d]+((([.]{1}|[_]{1,2}|[-])+)([a-z\d]+))*$", RegexOptions.CultureInvariant);
            if (false == regexImageName.Match(this.ImageName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageName, must match a pattern of " + regexImageName, new [] { "ImageName" });
            }

            yield break;
        }
    }
}
